stages:
  - setup
  - test
  - static
  - dockerize
  - release

variables:
  DOCKER_IMAGE_NAME: "grepbible-server"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules/
    - .npm/

.node-python-base:
  image: node:latest
  before_script:
    - node -v  # Print out node version for debugging
    - npm -v   # Print out npm version for debugging
    - apt-get update && apt-get install -y python3 python3-pip python3-venv  # Ensure python3-venv is installed
    - python3 -m venv venv  # Create a virtual environment
    - source venv/bin/activate  # Activate the virtual environment
    - pip install grepbible  # Install grepbible within the virtual environment
    - npm install  # Install project dependencies

update-version:
  stage: setup
  image: node:latest
  script:
    - node update-version.js
  artifacts:
    paths:
      - package.json
  only:
    - tags

eslint:
  stage: static
  extends: .node-python-base
  allow_failure: true
  script:
    - npm install eslint
    - npx eslint .
  when: manual

dockerize:
  stage: dockerize
  image: docker:20.10.24
  services:
    - docker:20.10.24-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_IMAGE_NAME: "grepbible-server"
  script:
    - echo "Building Docker image..."
    - docker build -t ${DOCKER_IMAGE_NAME}:latest .
  when: manual

test:
  stage: test
  extends: .node-python-base
  script:
    - npm test  # Run tests

release-npm-package:
  stage: release
  extends: .node-python-base
  only:
    - tags
  script:
    - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
    - npm publish
  when: manual

release-docker:
  stage: release
  needs: ["update-version"]
  image: docker:20.10.24
  services:
    - docker:20.10.24-dind
  only:
    - tags
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_IMAGE_NAME: "grepbible-server"
  script:
    - echo "Docker Hub Username ${DOCKER_HUB_USERNAME}"
    - docker info
    - docker build -t ${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME}:${CI_COMMIT_TAG} -t ${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest .
    - echo $DOCKER_HUB_ACCESS_TOKEN | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    - docker push ${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker push ${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest
  when: manual
