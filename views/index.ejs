<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <style>
        .container {
            text-align: center; /* Center the line if desired */
        }
        .highlight {
            color: red;
        }

        .quarter-line {
            display: inline-block; /* Makes the width setting applicable */
            width: 25%; /* Set the line width to 50% of its parent */
            height: 1px; /* Set the line thickness */
            background-color: grey; /* Set the line color */
            /*margin-top: 10px;
            margin-bottom: 10px;*/
        }
        
    </style>
    <title>grepbible WebUI</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        var basePath = calculateBasePath();
        if (basePath.endsWith('/')) {
            basePath = basePath.slice(0, -1); // Remove trailing slash
        }


        const BOOK2CHAPTERS = {
                '1 Chronicles': 29,
                '1 Corinthians': 16,
                '1 John': 5,
                '1 Kings': 22,
                '1 Peter': 5,
                '1 Samuel': 31,
                '1 Thessalonians': 5,
                '1 Timothy': 6,
                '2 Chronicles': 36,
                '2 Corinthians': 13,
                '2 John': 1,
                '2 Kings': 25,
                '2 Peter': 3,
                '2 Samuel': 24,
                '2 Thessalonians': 3,
                '2 Timothy': 4,
                '3 John': 1,
                'Acts': 28,
                'Amos': 9,
                'Colossians': 4,
                'Daniel': 12,
                'Deuteronomy': 34,
                'Ecclesiastes': 12,
                'Ephesians': 6,
                'Esther': 10,
                'Exodus': 40,
                'Ezekiel': 48,
                'Ezra': 10,
                'Galatians': 6,
                'Genesis': 50,
                'Habakkuk': 3,
                'Haggai': 2,
                'Hebrews': 13,
                'Hosea': 14,
                'Isaiah': 66,
                'James': 5,
                'Jeremiah': 52,
                'Job': 42,
                'Joel': 3,
                'John': 21,
                'Jonah': 4,
                'Joshua': 24,
                'Jude': 1,
                'Judges': 21,
                'Lamentations': 5,
                'Leviticus': 27,
                'Luke': 24,
                'Malachi': 4,
                'Mark': 16,
                'Matthew': 28,
                'Micah': 7,
                'Nahum': 3,
                'Nehemiah': 13,
                'Numbers': 36,
                'Obadiah': 1,
                'Philemon': 1,
                'Philippians': 4,
                'Proverbs': 31,
                'Psalms': 150,
                'Revelation': 22,
                'Romans': 16,
                'Ruth': 4,
                'Song of Solomon': 8,
                'Titus': 3,
                'Zechariah': 14,
                'Zephaniah': 3
            };

            function calculateBasePath() {
                const pathname = window.location.pathname;
                // Create an array from the pathname, splitting at each slash, and filtering out empty strings
                let pathSegments = pathname.split('/').filter(segment => segment.length > 0);

                // Find the index of the segment that starts with "api" or "q"
                const specialSegmentIndex = pathSegments.findIndex(segment => segment === "api" || segment === "q");

                // If such a segment is found, keep only the segments before it; otherwise, use all segments
                if (specialSegmentIndex !== -1) {
                    pathSegments = pathSegments.slice(0, specialSegmentIndex);
                }

                // Reconstruct the pathname from the filtered segments
                let basePath = '/' + pathSegments.join('/');

                // Combine with the origin to get the full base URL
                if (basePath.endsWith('/')) {
                    basePath = basePath.slice(0, -1); // Remove trailing slash
                }
                return window.location.origin + basePath;

            }

            function highlightText(fullText, searchText) {
                // Escape HTML special characters in searchText to prevent XSS attacks if searchText is user-controlled
                const escapedSearchText = searchText.replace(/[&<>"']/g, function(match) {
                    return {
                        '&': '&amp;',
                        '<': '&lt;',
                        '>': '&gt;',
                        '"': '&quot;',
                        "'": '&#39;'
                    }[match];
                });

                // Simple replacement to wrap searchText in a span for highlighting
                const highlighted = fullText.split(escapedSearchText).join(`<span class="highlight">${escapedSearchText}</span>`);
                return highlighted;
            }

            function ansiToHtml(text) {
                // Convert ANSI dark green text to HTML
                const darkGreenTextHtml = text.replace(/\u001b\[32m/g, '<br><span style="color:darkgreen;">');

                // Convert ANSI orange text to HTML (note: there's no exact 'orange' in basic HTML colors, 'orange' is used for demonstration)
                const orangeTextHtml = darkGreenTextHtml.replace(/\u001b\[33m/g, '<br><span style="color:orange;">');

                // Reset ANSI formatting to default
                const resetFormattingHtml = orangeTextHtml.replace(/\u001b\[0m/g, '</span>');

                return resetFormattingHtml;
            }

            function parseAndDisplayCitation(citation) {
                $.post(calculateBasePath() + '/parse', { citation: citation }, function(data) {
                    if (data.error) {
                        console.error('Error parsing citation:', data.error);
                        console.error('Citation:', citation);
                        return;
                    }

                    // Ensure the book dropdown is set to the correct book
                    $('#book').val(data.book);

                    // Dynamically populate the chapter dropdown based on the book
                    const chapterCount = BOOK2CHAPTERS[data.book] || 0; // Adding a fallback value
                    const chapterSelect = $('#chapter').empty();
                    chapterSelect.append('<option value="" disabled selected>Select a chapter</option>');
                    for (let i = 1; i <= chapterCount; i++) {
                        let selected = i.toString() === data.chapter ? ' selected' : '';
                        chapterSelect.append(`<option value="${i}"${selected}>${i}</option>`);
                    }

                    // Handle line display; assuming 'data.lines' is an array of selected line numbers
                    $('#line').text(data.lines && data.lines.length > 0 ? `Lines: ${data.lines.join(", ")}` : 'Select a line');
                }, 'json');
            }
            //
            function getVersions(ref){
                let citationInputVal;
                // if reference is not provided, use the input value
                if (!ref) {
                    citationInputVal = $('#citationInput').val();
                } else {
                    citationInputVal = ref;
                }
                
                const versionSelected = $('#version').val();
                const version2Selected = $('#version2').val();
                const version3Selected = $('#version3').val();
                
                // Prepare the data object for the POST request
                const postData = {
                    query: citationInputVal,
                    version: versionSelected,
                    version2: version2Selected,
                    version3: version3Selected
                };
                return postData;
            }
            

        //{ query: citationInputVal, version: versionSelected }
        $(document).ready(function() {
            // if data is defined, display it as `$('#citation').html(ansiToHtml(data.quote));`
            var results = "<%= results %>"; // This takes the server-side variable and makes it available client-side

            if (results) {
                $('#citation').html(ansiToHtml(results));
            }

            $('#randomVerseBtn').click(function() {
                var selectedVersion = $('#version').val();
                $.get(calculateBasePath() + '/random-verse-reference', function(_data) {
                    const reference = _data.reference;
                    const postData = getVersions(reference);
                    // Now use the /search API to get the quote for this reference
                    $.post(calculateBasePath() + '/search', postData, function(data) {
                        if(data.redirectUrl) {
                            window.location.href = data.redirectUrl;
                        }
                        if (data.error) {
                            console.error('Error fetching quote:', data.error);
                            $('#citation').text('Error fetching quote. Please try again.');
                        } else {
                            $('#citationInput').val(reference);
                            parseAndDisplayCitation(reference);
                            //updateCitation();
                            // Display the fetched quote
                            $('#citation').html(ansiToHtml(data.quote));
                        }
                        }, 'json');
                }).fail(function() {
                    $('#randomVerseOutput').text("Failed to fetch a random verse reference. Please try again.");
                });
            });
            
            function updateCitation() {
                const selectedBook = $('#book').find(":selected").text();
                const selectedChapter = $('#chapter').find(":selected").val();
                const updatedCitation = `${selectedBook} ${selectedChapter}:1`; // Assuming verse 1 as default
                $('#citationInput').val(updatedCitation);
            }

            // Event listeners for the book and chapter dropdowns
            $('#book').change(function() {
                // Update chapters dropdown based on selected book
                const selectedBook = $(this).val();
                const chaptersCount = BOOK2CHAPTERS[selectedBook] || 1;
                $('#chapter').empty();
                for (let i = 1; i <= chaptersCount; i++) {
                    $('#chapter').append(`<option value="${i}">${i}</option>`);
                }
                // Update citation after changing book (and resetting chapters)
                updateCitation();
            });

            $('#chapter').change(function() {
                // Update citation when chapter changes
                updateCitation();
            });
            
            // Populate the book dropdown
            const bookSelect = $('#book').append('<option value="" disabled selected></option>');
            Object.keys(BOOK2CHAPTERS).forEach(book => {
                bookSelect.append(`<option value="${book}">${book}</option>`);
            });

            $('#searchForm').on('submit', function(event) {
                event.preventDefault();
                
                // Collect input values
                const postData = getVersions();

                $.post(calculateBasePath() + '/search', postData, function(data) {
                    if(data.redirectUrl) {
                        window.location.href = data.redirectUrl;
                    }
                    if (data.error) {
                        console.error('Error fetching quote:', data.error);
                        $('#citation').text('Error fetching quote. Please try again.');
                    } else {
                        // Display the fetched quote
                        $('#citation').html(ansiToHtml(data.quote));
                    }
                }, 'json');
                
                //parseAndDisplayCitation(postData.query);
            });

            $('#findButton').click(function() {
                $('#citation').html('');
                const findText = $('#findText').val();
                const version = $('#version').val();
                const caseInsensitive = $('#caseInsensitive').is(':checked');
                const wholeWords = $('#wholeWords').is(':checked');
                if (!findText.trim()) {
                    alert('Please enter text to find.');
                    return;
                }

                // Send request to server to perform the search
                $.post(calculateBasePath() + '/search-text', { 
                    query: findText
                    , version: version
                    , caseInsensitive: caseInsensitive
                    , wholeWords: wholeWords
                }, function(data) {
                    $('#citation').html(highlightText(data.results, findText) || 'No results found.');
                }).fail(function() {
                    $('#citation').text('Error performing search. Please try again.');
                });
            });
        });
    </script>
</head>
<body>
    <h1>grepbible WebUI</h1>
    <div style="margin-top: 20px;">
        <p>A WebUI for <a href="https://github.com/maxlit/grepbible" target="_blank">grepbible</a> CLI tool.</p>
        <p><small>repo: <a href="https://github.com/maxlit/grepbible-server" target="_blank">grepbible-server</a></small></p>
    </div>
    <hr>
    <form id="searchForm">
        <div>
            <label for="version">1st version:</label>
            <select name="version1" id="version">
                <% bibles.forEach(function(bible) { %>
                    <option value="<%= bible.code %>" <%= bible.code === 'kj' ? 'selected' : '' %>><%= bible.name %> <%= bible.local ? '[local]' : '' %></option>
                <% }); %>
            </select>
        </div>
        
        <div>
            <label for="version2">2nd version:</label>
            <select name="version2" id="version2">
                <option value="" selected disabled>Select a version</option>
                <% bibles.forEach(function(bible) { %>
                    <option value="<%= bible.code %>"><%= bible.name %> <%= bible.local ? '[local]' : '' %></option>
                <% }); %>
            </select>
        </div>
        
        <div>
            <label for="version3">3rd version:</label>
            <select name="version3" id="version3">
                <option value="" selected disabled>Select a version</option>
                <% bibles.forEach(function(bible) { %>
                    <option value="<%= bible.code %>"><%= bible.name %> <%= bible.local ? '[local]' : '' %></option>
                <% }); %>
            </select>
        </div>
        
        <div>
            <input type="text" id="citationInput" name="query" placeholder="quote e.g. Genesis 1:1"/>
        </div>
        <div>
            <label for="book">Book:</label>
            <select id="book"></select>
        </div>
        <div>
            <label for="chapter">Chapter:</label>
            <select id="chapter"></select>
        </div>
        <div>
            <label for="line">Line(s):</label>
            <span id="line"></span>
        </div>
        <div>
            <button type="submit">Search</button>
        </div>
        <br>
        <div class="quarter-line">
            
            <button id="randomVerseBtn">Random Verse</button>
            <br>
        </div>
        <br>
        <div>
            <br>
            <label for="findText">Find text:</label>
            <input type="text" id="findText" name="findText" placeholder="Enter text to find" />
            <button type="button" id="findButton">Find</button>
                <input type="checkbox" id="caseInsensitive" name="caseInsensitive">
                <label for="caseInsensitive">case-insensitive</label>
                <input type="checkbox" id="wholeWords" name="wholeWords">
                <label for="wholeWords">whole words</label>
        </div>

    </form>
    <hr>
    <div id="citation"></div>
</body>
</html>
