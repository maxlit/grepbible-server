<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0">
    <!-- %PLACEHOLDER% -->
    <style>
        .container {
            text-align: center; /* Center the line if desired */
        }
        .highlight {
            color: red;
        }

        .quarter-line {
            display: inline-block; /* Makes the width setting applicable */
            width: 25%; /* Set the line width to 50% of its parent */
            height: 1px; /* Set the line thickness */
            background-color: grey; /* Set the line color */
            /*margin-top: 10px;
            margin-bottom: 10px;*/
        }
        
        .collapsed {
            display: none;
        }
        .expand-button {
            cursor: pointer;
            margin-right: 10px;
            font-size: 20px;
            color: #0000EE;  /* Standard hyperlink blue color */
            text-decoration: none;
        }
        .expand-button:hover {
            text-decoration: underline;
        }
        .header-container {
            display: flex;
            align-items: flex-start;
            justify-content: flex-start;
            margin-left: 20px;
        }
        footer {
            margin-top: 2rem;
            padding: 1rem;
            border-top: 1px solid #eee;
            text-align: center;
            color: #666;
            
            /* Mobile-friendly additions */
            width: 100%;
            box-sizing: border-box;
            font-size: 0.9rem;  /* Slightly smaller text on mobile */
            padding: 1rem 0.5rem;  /* Less horizontal padding on mobile */
        }
        
        /* Media query for larger screens */
        @media screen and (min-width: 768px) {
            footer {
                padding: 1rem;
                font-size: 1rem;
            }
        }

        footer p {
            margin: 0.5rem 0;  /* Consistent spacing between paragraphs */
            word-wrap: break-word;  /* Prevent text overflow on small screens */
        }

        footer a {
            color: #0066cc;
            text-decoration: none;
            display: inline-block;  /* Better touch targets */
            padding: 0.2rem 0;  /* Slightly larger touch area */
        }
        
        footer a:hover {
            text-decoration: underline;
        }
    </style>
    <title>grepbible WebUI</title>
    <!-- Attempt to load jQuery from a CDN -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <!-- Fallback to local jQuery if the CDN fails -->
    <script>window.jQuery || document.write('<script src="/js/jquery.min.js"><\/script>')</script>

    <script>
        // UI Toggle functionality
        $(document).ready(function() {
            const toggleButton = $('#toggleUI');
            const collapsibleContent = $('.collapsible-content');
            
            toggleButton.click(function() {
                collapsibleContent.toggleClass('collapsed');
                toggleButton.text(collapsibleContent.hasClass('collapsed') ? '+' : 'âˆ’');
            });
        });

        var basePath = calculateBasePath();
        if (basePath.endsWith('/')) {
            basePath = basePath.slice(0, -1); // Remove trailing slash
        }
            const BOOK2CHAPTERS = <%- JSON.stringify(BOOK2CHAPTERS) %>;
            // Add this new code to get the version from URL
            function getDefaultVersionFromUrl() {
                const pathname = window.location.pathname;
                const matches = pathname.match(/\/version\/([^\/]+)/);
                return matches ? matches[1] : 'kj'; // Default to 'kj' if no version specified
            }
            const defaultVersion = getDefaultVersionFromUrl();

            function calculateBasePath() {
                let pathname = window.location.pathname;
                console.log('Frontend calculateBasePath called');
                console.log('Current pathname:', pathname);
                if (pathname == '/') pathname = '';
                const result = _calculateBasePath(pathname);
                console.log('Calculated base path:', result);
                return result;
            }
            function _calculateBasePath(pathname) {
                // Create an array from the pathname, splitting at each slash, and filtering out empty strings
                let pathSegments = pathname.split('/').filter(segment => segment.length > 0);

                // Find the index of the segment that starts with "api", "q", or "version"
                const specialSegmentIndex = pathSegments.findIndex(segment => 
                    segment === "api" || 
                    segment === "q" || 
                    segment === "version"
                );

                // If such a segment is found, keep only the segments before it; otherwise, use all segments
                if (specialSegmentIndex !== -1) {
                    pathSegments = pathSegments.slice(0, specialSegmentIndex);
                }

                // Reconstruct the pathname from the filtered segments
                let basePath = '/' + pathSegments.join('/');

                // Combine with the origin to get the full base URL
                if (basePath.endsWith('/')) {
                    basePath = basePath.slice(0, -1); // Remove trailing slash
                }
                return window.location.origin + basePath;
            }

            function highlightText(fullText, searchText) {
                // Escape HTML special characters in searchText to prevent XSS attacks if searchText is user-controlled
                const escapedSearchText = searchText.replace(/[&<>"']/g, function(match) {
                    return {
                        '&': '&amp;',
                        '<': '&lt;',
                        '>': '&gt;',
                        '"': '&quot;',
                        "'": '&#39;'
                    }[match];
                });

                // Simple replacement to wrap searchText in a span for highlighting
                const highlighted = fullText.split(escapedSearchText).join(`<span class="highlight">${escapedSearchText}</span>`);
                return highlighted;
            }

            function cleanRedirectUrl(redirectUrl) {
                let splits = redirectUrl.split('/');

                const basePathSegment = window.location.pathname.split('/')[1];

                const pathSegments = redirectUrl.split('/');
                if (pathSegments.length > 2) {
                    if (splits[0] === splits[1] || (splits[0] === basePathSegment)) {
                        return splits.slice(1).join('/');
                    }
                }
                return redirectUrl;
            }

            function ansiToHtml(text) {
                // Split text into lines first
                const lines = text.split('\n').filter(line => line.trim());
                
                return lines.map(line => {
                    if (line.includes('\u001b[')) {
                        // Handle ANSI-colored text
                        return line
                            .replace(/\u001b\[32m/g, '<br><span style="color:darkgreen;">')
                            .replace(/\u001b\[33m/g, '<br><span style="color:orange;">')
                            .replace(/\u001b\[0m/g, '</span>');
                    } else {
                        // Handle plain text with black color
                        return `<br><span style="color:black;">${line}</span>`;
                    }
                }).join('').replace(/^<br>/, ''); // Remove the first <br> if it exists
            }

            function parseAndDisplayCitation(citation, versions = ['kj']) {
                $.post(calculateBasePath() + '/parse', { citation: citation }, function(data) {
                    if (data.error) {
                        console.error('Error parsing citation:', data.error);
                        console.error('Citation:', citation);
                        return;
                    }

                    // Ensure the book dropdown is set to the correct book
                    $('#book').val(data.book);

                    // Dynamically populate the chapter dropdown based on the book
                    const chapterCount = BOOK2CHAPTERS[data.book] || 0; // Adding a fallback value
                    const chapterSelect = $('#chapter').empty();
                    chapterSelect.append('<option value="" disabled selected>Select a chapter</option>');
                    for (let i = 1; i <= chapterCount; i++) {
                        let selected = i.toString() === data.chapter ? ' selected' : '';
                        chapterSelect.append(`<option value="${i}"${selected}>${i}</option>`);
                    }

                    // Handle line display; assuming 'data.lines' is an array of selected line numbers
                    $('#line').text(data.lines && data.lines.length > 0 ? `${data.lines.join(", ")}` : 'Select a line');
                }, 'json');
                $('#version').val(versions[0]);
                if (versions.length > 1) {
                    $('#version2').val(versions[1]);
                }
                if (versions.length > 2) {
                    $('#version3').val(versions[2]);
                }
            }
            //
            function getVersions(ref){
                let citationInputVal;
                // if reference is not provided, use the input value
                if (!ref) {
                    console.log('getVersions::No reference provided, using input value');
                    citationInputVal = $('#citationInput').val();
                } else {
                    citationInputVal = ref;
                }
                
                const versionSelected = $('#version').val();
                const version2Selected = $('#version2').val();
                const version3Selected = $('#version3').val();
                
                // Prepare the data object for the POST request
                const postData = {
                    query: citationInputVal,
                    version: versionSelected,
                    version2: version2Selected,
                    version3: version3Selected
                };
                return postData;
            }
            

        //{ query: citationInputVal, version: versionSelected }
        $(document).ready(function() {
            var results = <%- JSON.stringify(results) %>;
            
            if (results) {
                $('#citation').empty().html(ansiToHtml(results));
            }

            // Set the default version based on URL
            $('#version').val(defaultVersion);

            var reference = "<%= reference %>"; // This takes the server-side variable and makes it available client-side
            var versions = <%- JSON.stringify(versions) %>;

            if (reference) {
                $('#citationInput').val(reference);
                parseAndDisplayCitation(reference, versions);
            }
            
            $('#randomVerseBtn').click(function() {
                // Use the basePath variable that's passed from the server
                const basePath = '<%= basePath %>';
                const postData = getVersions();
                
                // Create versions string from selected versions
                const versions = [postData.version, postData.version2, postData.version3]
                    .filter(Boolean)  // Remove empty/null values
                    .join(',');      // Join with commas
                
                // Redirect directly to the random endpoint with versions
                window.location.href = basePath + '/random/' + versions;
            });
            
            function updateCitation() {
                const selectedBook = $('#book').find(":selected").text();
                const selectedChapter = $('#chapter').find(":selected").val();
                const updatedCitation = `${selectedBook} ${selectedChapter}`; // Only include book and chapter
                $('#citationInput').val(updatedCitation);
            }

            // Event listeners for the book and chapter dropdowns
            $('#book').change(function() {
                // Update chapters dropdown based on selected book
                const selectedBook = $(this).val();
                const chaptersCount = BOOK2CHAPTERS[selectedBook] || 1;
                $('#chapter').empty();
                for (let i = 1; i <= chaptersCount; i++) {
                    $('#chapter').append(`<option value="${i}">${i}</option>`);
                }
                // Update citation after changing book (and resetting chapters)
                updateCitation();
                // Trigger search if a valid book is selected
                if (selectedBook) {
                    search();
                }
            });

            $('#chapter').change(function() {
                // Update citation when chapter changes
                updateCitation();
                // Trigger search if a chapter is selected
                if ($(this).val()) {
                    search();
                }
            });
            
            // Populate the book dropdown
            const bookSelect = $('#book').append('<option value="" disabled selected></option>');
            Object.keys(BOOK2CHAPTERS).forEach(book => {
                bookSelect.append(`<option value="${book}">${book}</option>`);
            });
            function search() {
                // Get the original base path without /f/... part
                const originalBasePath = '<%= basePath %>';
                
                // Collect input values
                const postData = getVersions();
                const parallelLines = $('#parallelLines').is(':checked');

                $.post(originalBasePath + '/search', { ...postData, parallelLines }, function(data) {
                    if(data.redirectUrl) {
                        let redirectUrl = data.redirectUrl;
                        console.log('ready::findQuoteBtn:: Redirecting to:', redirectUrl);
                        if (redirectUrl[0] !== '/') {
                            redirectUrl = '/' + redirectUrl;
                        }
                        // Add parallel parameter to the URL if checked
                        if (parallelLines) {
                            redirectUrl += (redirectUrl.includes('?') ? '&' : '?') + 'parallel=true';
                        }
                        window.location.href = redirectUrl;
                    }
                    if (data.error) {
                        console.error('Error fetching quote:', data.error);
                        $('#citation').text('Error fetching quote. Please try again.');
                    }
                }, 'json');
            }
            $('#findQuoteBtn').on('click', function(event) {
                event.preventDefault() // Prevent default button action, important if it's a submit button
                search()
            });
            $('#findText').keypress(function(event) {
                if (event.keyCode === 13) {  // 13 is the Enter key
                    performTextSearch();
                }
            });
            $('#citationInput').keypress(function(event) {
                if (event.keyCode === 13) {
                    search();
                }
            });
            $('#version2').change(search)
            $('#version3').change(search)

            $('#findButton').click(function() {
                performTextSearch();
            });

            function performTextSearch() {
                $('#citation').html('');
                const findText = $('#findText').val();
                const version = $('#version').val();
                const caseInsensitive = $('#caseInsensitive').is(':checked');
                const wholeWords = $('#wholeWords').is(':checked');
                
                if (!findText.trim()) {
                    alert('Please enter text to find.');
                    return;
                }

                // Store the original base path before modifying URL
                const originalBasePath = calculateBasePath().replace(/\/f\/.*$/, '');

                // Update URL
                const newUrl = `${originalBasePath}/f/${version}/${encodeURIComponent(findText)}`;
                window.history.pushState({ type: 'textSearch' }, '', newUrl);

                // Use the original base path for the AJAX request
                $.post(originalBasePath + '/search-text', { 
                    query: findText,
                    version: version,
                    caseInsensitive: caseInsensitive,
                    wholeWords: wholeWords
                }, function(data) {
                    $('#citation').html(highlightText(data.results, findText) || 'No results found.');
                }).fail(function() {
                    $('#citation').text('Error performing search. Please try again.');
                });
            }

            // Add popstate event handler to handle browser back/forward
            window.addEventListener('popstate', function(event) {
                if (event.state && event.state.type === 'textSearch') {
                    // Extract version and text from URL
                    const match = window.location.pathname.match(/\/f\/([^\/]+)\/(.+)$/);
                    if (match) {
                        const [, version, text] = match;
                        $('#version').val(version);
                        $('#findText').val(decodeURIComponent(text));
                        performTextSearch();
                    }
                }
            });

            // Set initial versions in dropdowns
            if (versions && versions.length > 0) {
                $('#version').val(versions[0]);  // First version
                if (versions.length > 1) {
                    $('#version2').val(versions[1]);  // Second version
                }
                if (versions.length > 2) {
                    $('#version3').val(versions[2]);  // Third version
                }
            }

            $('#parallelLines').change(function() {
                const isParallel = $(this).is(':checked');
                let newUrl = window.location.pathname;
                
                // Update the URL search parameters
                const searchParams = new URLSearchParams(window.location.search);
                if (isParallel) {
                    searchParams.set('parallel', 'true');
                } else {
                    searchParams.delete('parallel');
                }
                
                // Reload the page with new parameter
                window.location.href = newUrl + (searchParams.toString() ? '?' + searchParams.toString() : '');
            });
        });
    </script>
</head>
<body>
    <div>
        <h1><span class="expand-button" id="toggleUI">âˆ’</span> grepbible WebUI</h1>
    </div>
    <hr>
    <div id="searchForm" class="collapsible-content">
        <div>
            <label for="version">1st version:</label>
            <select name="version1" id="version">
                <% bibles.forEach(function(bible) { %>
                    <option value="<%= bible.code %>"><%= bible.name %> <%= bible.local ? '[local]' : '' %></option>
                <% }); %>
            </select>
        </div>
        
        <div>
            <label for="version2">2nd version:</label>
            <select name="version2" id="version2">
                <option value="" selected disabled>Select a version</option>
                <% bibles.forEach(function(bible) { %>
                    <option value="<%= bible.code %>"><%= bible.name %> <%= bible.local ? '[local]' : '' %></option>
                <% }); %>
            </select>
        </div>
        
        <div>
            <label for="version3">3rd version:</label>
            <select name="version3" id="version3">
                <option value="" selected disabled>Select a version</option>
                <% bibles.forEach(function(bible) { %>
                    <option value="<%= bible.code %>"><%= bible.name %> <%= bible.local ? '[local]' : '' %></option>
                <% }); %>
            </select>
        </div>
        
        <div>
            <input type="text" id="citationInput" name="query" placeholder="quote e.g. Genesis 1:1"/>
        </div>
        <div>
            <label for="book">Book:</label>
            <select id="book"></select>
        </div>
        <div>
            <label for="chapter">Chapter:</label>
            <select id="chapter"></select>
        </div>
        <div>
            <label for="line">Line(s):</label>
            <span id="line"></span>
        </div>
        <div>
            <input type="checkbox" id="parallelLines" name="parallelLines" <% if (locals.parallelLines) { %>checked<% } %>>
            <label for="parallelLines">Parallel lines</label>
        </div>
        <div>
            <button id="findQuoteBtn">Search</button>
        </div>
        <br>
        <div class="quarter-line">
            
            <button id="randomVerseBtn">Random Verse</button>
            <br>
        </div>
        <br>
        <div>
            <br>
            <label for="findText">Find text:</label>
            <input type="text" id="findText" placeholder="Enter text to find" value="<%= locals.searchText || '' %>"/>
            <button id="findButton">Find</button>
            <br>
            <input type="checkbox" id="caseInsensitive" name="caseInsensitive">
            <label for="caseInsensitive">Case insensitive</label>
            <input type="checkbox" id="wholeWords" name="wholeWords">
            <label for="wholeWords">Whole words</label>
        </div>

    </div>
    <hr>
    <div id="citation"></div>

    <footer class="collapsible-content" style="text-align: left;">
        <p>A WebUI<% if (process.env.GIT_VERSION) { %> (version: <%= process.env.GIT_VERSION %>) <% } %> for <a href="https://github.com/maxlit/grepbible" target="_blank">grepbible</a> CLI tool.</p>
        <p><small>repo: <a href="https://github.com/maxlit/grepbible-server" target="_blank">grepbible-server</a></small></p>
    </footer>
</body>
</html>
